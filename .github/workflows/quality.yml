name: Code Quality

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]
  schedule:
    # 每周运行一次安全扫描
    - cron: '0 2 * * 1'

jobs:
  code-quality:
    runs-on: ubuntu-latest
    name: Code Quality Analysis
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, curl, json, zip
        tools: composer

    - name: Install dependencies
      run: |
        if [ -f composer.json ]; then
          composer install --prefer-dist --no-progress
        fi

    - name: Run PHP Mess Detector
      run: |
        if [ -f vendor/bin/phpmd ]; then
          vendor/bin/phpmd src text cleancode,codesize,controversial,design,naming,unusedcode || true
        else
          echo "PHPMD not installed, skipping..."
        fi
      continue-on-error: true

    - name: Run PHP Copy/Paste Detector
      run: |
        if [ -f vendor/bin/phpcpd ]; then
          vendor/bin/phpcpd src || true
        else
          echo "PHPCPD not installed, skipping..."
        fi
      continue-on-error: true

    - name: Run PHP Lines of Code
      run: |
        if [ -f vendor/bin/phploc ]; then
          vendor/bin/phploc src
        else
          echo "PHPLOC not installed, calculating manually..."
          find src -name "*.php" -exec wc -l {} + | tail -1
        fi

    - name: Check file permissions
      run: |
        echo "Checking file permissions..."
        find . -type f -name "*.php" -perm /111 | head -10 || echo "No executable PHP files found"
        
        echo "Checking for sensitive files..."
        find . -name "*.key" -o -name "*.pem" -o -name "*.p12" -o -name "*.pfx" | head -5 || echo "No sensitive files found"

    - name: Check for TODO/FIXME comments
      run: |
        echo "Checking for TODO/FIXME comments..."
        grep -r "TODO\|FIXME\|XXX\|HACK" src/ || echo "No TODO/FIXME comments found"

  security-scan:
    runs-on: ubuntu-latest
    name: Security Scan
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, curl, json, zip

    - name: Install dependencies
      run: |
        if [ -f composer.json ]; then
          composer install --prefer-dist --no-progress
        fi

    - name: Run Composer Security Audit
      run: |
        if [ -f composer.lock ]; then
          composer audit || echo "Security audit completed with warnings"
        else
          echo "No composer.lock found, skipping security audit"
        fi
      continue-on-error: true

    - name: Check for hardcoded secrets
      run: |
        echo "Checking for potential hardcoded secrets..."
        
        # 检查常见的密码模式
        grep -r -i "password\s*=\s*['\"][^'\"]*['\"]" src/ || echo "No hardcoded passwords found"
        grep -r -i "secret\s*=\s*['\"][^'\"]*['\"]" src/ || echo "No hardcoded secrets found"
        grep -r -i "api_key\s*=\s*['\"][^'\"]*['\"]" src/ || echo "No hardcoded API keys found"
        grep -r -i "token\s*=\s*['\"][^'\"]*['\"]" src/ || echo "No hardcoded tokens found"

    - name: Check file security
      run: |
        echo "Checking for potential security issues..."
        
        # 检查eval使用
        grep -r "eval\s*(" src/ || echo "No eval() usage found"
        
        # 检查exec/system调用
        grep -r "exec\s*(\|system\s*(\|shell_exec\s*(\|passthru\s*(" src/ || echo "No dangerous function calls found"
        
        # 检查文件包含
        grep -r "include\s*(\|require\s*(" src/ | grep -v "include_once\|require_once" || echo "No unsafe includes found"

  dependency-check:
    runs-on: ubuntu-latest
    name: Dependency Analysis
    
    steps:
    - uses: actions/checkout@v4

    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: '8.1'
        extensions: mbstring, curl, json, zip

    - name: Analyze dependencies
      run: |
        if [ -f composer.json ]; then
          echo "=== Composer Dependencies ==="
          cat composer.json | grep -A 20 '"require"' || echo "No dependencies found"
          
          echo -e "\n=== Dev Dependencies ==="
          cat composer.json | grep -A 20 '"require-dev"' || echo "No dev dependencies found"
          
          if [ -f composer.lock ]; then
            echo -e "\n=== Installed Packages ==="
            composer show --installed | head -20
            
            echo -e "\n=== Outdated Packages ==="
            composer outdated --direct || echo "All packages are up to date"
          fi
        else
          echo "No composer.json found - using built-in dependencies only"
        fi

    - name: Check for unused dependencies
      run: |
        if [ -f composer.json ] && [ -f vendor/bin/composer-unused ]; then
          vendor/bin/composer-unused || echo "Composer unused check completed"
        else
          echo "Composer unused checker not available"
        fi
      continue-on-error: true
